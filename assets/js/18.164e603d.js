(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{172:function(t,n,e){"use strict";e.r(n);var i=e(0),a=Object(i.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("#一. 注意事项")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("除非迫不得已切勿直接操作DOM，尽量操作数据")])]),t._v(" "),e("li",[e("p",[t._v("尽量使用Vue的语法糖，比如可以用:style代替v-bind:style；用@click代替v-on:click")])])]),t._v(" "),e("p",[t._v("#二. 规范")]),t._v(" "),e("ol",[e("li",[t._v("命名")])]),t._v(" "),e("ul",[e("li",[t._v("组件名称(含路由组件)使用“-”分割，如person-new-com，不推荐驼峰")])]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[t._v("事件")])]),t._v(" "),e("ul",[e("li",[t._v("事件名称使用“-”分割，且前缀为该组件的名称，例如当前组件为open-layer.vue，则事件名称为 open-layer-close")])]),t._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[t._v("数据")])]),t._v(" "),e("ul",[e("li",[t._v("不要将html的attribute和vue的model混用")])]),t._v(" "),e("ol",{attrs:{start:"4"}},[e("li",[t._v("在组件中使用第三方插件")])]),t._v(" "),e("ul",[e("li",[t._v("组件的初始化代码")])]),t._v(" "),e("p",[void 0,t._v(" "),e("script",[t._v("\nimport echarts from 'echarts';\nexport default {`\ndata () {\nreturn {\n}\n},\nready: {\n},\ndestroyed: {\n},\nmethods: {\n}\n}\n")])],2),e("style"),e("p"),t._v(" "),e("ul",[e("li",[t._v("要创建一个echarts实例，应该在ready里面完成，但代码较多且需要拆分，可在methods里定义：")])]),t._v(" "),[e("div",{directives:[{name:"el",rawName:"v-el:dom-line",arg:"dom-line"}],staticClass:"chart"})],t._v(" "),e("script",[t._v("\n import echarts from 'echarts';\n import $ from 'jquery';\n export default {\n  data () {\n      return {\n          chartData: {}\n      }\n  },\n  ready: {\n      this.getData();\n  },\n  beforeDestroy: {\n      // 销毁定时器\n      if (this.chartTimeout) {\n          clearTimeout(this.chartTimeout);\n      }\n      // 销毁echart实例\n      if (this.myChart) {\n          this.myChart.dispose();\n      }\n  },\n  methods: {\n      initChart () {\n          if (!this.myChart) {\n              this.myChart = echarts.init(this.$els.domLine);\n          }\n          var option = {\n              // ...\n          }\n          this.myChart.setOption(option);\n      },\n      getData() {\n          var _this = this;\n          $.ajax({\n              url: '',\n              type: 'get',\n              data: {},\n              success (data) {\n                  // 每分钟更新一次数据\n                  _this.data = data;\n                  Vue.nextTick(function() {\n                      _this.initChart();\n                  });\n                  _this.chartTimeout = setTimeout(function() {\n                      _this.getData();\n                  }, 1000 * 60);\n              }\n          })\n<pre><code>  }\n</code></pre>\n<p>}\n}\n")]),e("p"),t._v(" "),e("h1",{attrs:{id:"资源的高度可复用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#资源的高度可复用"}},[t._v("#")]),t._v(" 资源的高度可复用")]),t._v(" "),e("ul",[e("li",[t._v("为了使组件，自定义指令，自定义过滤器复用，要将可复用的内容单独拆离，")]),t._v(" "),e("li",[t._v("将组件放置在components目录内，")]),t._v(" "),e("li",[t._v("将自定义指令放置在 directives 目录内，")]),t._v(" "),e("li",[t._v("将自定义过滤器放置在 filters 目录内")])]),t._v(" "),e("p",[t._v("#css的使用")]),t._v(" "),e("ol",[e("li",[t._v("将业务型的css单独写一个文件，")]),t._v(" "),e("li",[t._v("功能型的css，最好和组件一起，不推荐拆离，比如一个通用的confirm确认框。")])])],2)}),[],!1,null,null,null);n.default=a.exports}}]);